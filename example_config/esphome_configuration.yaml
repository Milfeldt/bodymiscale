esphome:
  name: xiaomi-miscale
  friendly_name: xiaomi_miscale

esp32:
  board: esp32dev
  framework:
    type: arduino

wifi:
  ssid: !secret ssid
  password: !secret wpa2
  fast_connect: true

captive_portal:

logger:

api:

ota:
  - platform: esphome
    password: !secret ota_password

esp32_ble_tracker:

time:
  - platform: homeassistant
    id: esptime

# Configuration
substitutions:
  mac_address: "5C:CA:D3:70:D4:A2"
  user1_name: "Aurelien"
  weight_user1_min: "70"
  weight_user1_max: "74.99"
  user2_name: "Noham"
  weight_user2_min: "20"
  weight_user2_max: "30"
  #  user3_name: "Name3"
  #  weight_user3_min: "60"
  #  weight_user3_max: "69.99"
  #  user4_name: "Name4"
  #  weight_user4_min: "75"
  #  weight_user4_max: "79.99"
  #  user5_name: "Name5"
  #  weight_user5_min: "50"
  #  weight_user5_max: "59.99"

number:
  # User1
  - platform: template
    name: "Weight Num ${user1_name}"
    id: weight_num_user1
    restore_value: true
    optimistic: true
    min_value: 0
    max_value: 200
    step: 0.1
    unit_of_measurement: "kg"
    internal: true

  - platform: template
    name: "Impedance Num ${user1_name}"
    id: impedance_num_user1
    restore_value: true
    optimistic: true
    min_value: 0
    max_value: 1000
    step: 0.1
    unit_of_measurement: "ohm"
    internal: true

  - platform: template
    name: "Last Time Measurement Num ${user1_name}"
    id: last_time_measurement_num_user1
    min_value: 0
    max_value: 4294967295
    step: 0.1
    optimistic: true
    restore_value: true
    internal: true

  # User2
  - platform: template
    name: "Weight Num ${user2_name}"
    id: weight_num_user2
    restore_value: true
    optimistic: true
    min_value: 0
    max_value: 200
    step: 0.1
    unit_of_measurement: "kg"
    internal: true

  - platform: template
    name: "Impedance Num ${user2_name}"
    id: impedance_num_user2
    restore_value: true
    optimistic: true
    min_value: 0
    max_value: 1000
    step: 0.1
    unit_of_measurement: "ohm"
    internal: true

  - platform: template
    name: "Last Time Measurement Num ${user2_name}"
    id: last_time_measurement_num_user2
    min_value: 0
    max_value: 4294967295
    step: 0.1
    optimistic: true
    restore_value: true
    internal: true

  # User3
  #  - platform: template
  #    name: "Weight Num ${user3_name}"
  #    id: weight_num_user3
  #    restore_value: true
  #    optimistic: true
  #    min_value: 0
  #    max_value: 200
  #    step: 0.1
  #    unit_of_measurement: 'kg'
  #    internal: true

  #  - platform: template
  #    name: "Impedance Num ${user3_name}"
  #    id: impedance_num_user3
  #    restore_value: true
  #    optimistic: true
  #    min_value: 0
  #    max_value: 1000
  #    step: 0.1
  #    unit_of_measurement: 'ohm'
  #    internal: true

  #  - platform: template
  #    name: "Last Time Measurement Num ${user3_name}"
  #    id: last_time_measurement_num_user3
  #    min_value: 0
  #    max_value: 4294967295
  #    step: 0.1
  #    optimistic: true
  #    restore_value: true
  #    internal: true

  # User4
  #  - platform: template
  #    name: "Weight Num ${user4_name}"
  #    id: weight_num_user4
  #    restore_value: true
  #    optimistic: true
  #    min_value: 0
  #    max_value: 200
  #    step: 0.1
  #    unit_of_measurement: 'kg'
  #    internal: true

  #  - platform: template
  #    name: "Impedance Num ${user4_name}"
  #    id: impedance_num_user4
  #    restore_value: true
  #    optimistic: true
  #    min_value: 0
  #    max_value: 1000
  #    step: 0.1
  #    unit_of_measurement: 'ohm'
  #    internal: true

  #  - platform: template
  #    name: "Last Time Measurement Num ${user4_name}"
  #    id: last_time_measurement_num_user4
  #    min_value: 0
  #    max_value: 4294967295
  #    step: 0.1
  #    optimistic: true
  #    restore_value: true
  #    internal: true

  # User5
  #  - platform: template
  #    name: "Weight Num ${user5_name}"
  #    id: weight_num_user5
  #    restore_value: true
  #    optimistic: true
  #    min_value: 0
  #    max_value: 200
  #    step: 0.1
  #    unit_of_measurement: 'kg'
  #    internal: true

  #  - platform: template
  #    name: "Impedance Num ${user5_name}"
  #    id: impedance_num_user5
  #    restore_value: true
  #    optimistic: true
  #    min_value: 0
  #    max_value: 1000
  #    step: 0.1
  #    unit_of_measurement: 'ohm'
  #    internal: true

  #  - platform: template
  #    name: "Last Time Measurement Num ${user5_name}"
  #    id: last_time_measurement_num_user5
  #    min_value: 0
  #    max_value: 4294967295
  #    step: 0.1
  #    optimistic: true
  #    restore_value: true
  #    internal: true

sensor:
  # Weight sensor User 1
  - platform: template
    name: "Weight ${user1_name}"
    id: weight_user1
    unit_of_measurement: "kg"
    icon: mdi:scale-bathroom
    accuracy_decimals: 2
    state_class: measurement
    lambda: "return id(weight_num_user1).state;"

  # Impedance sensor User 1
  - platform: template
    name: "Impedance ${user1_name}"
    id: impedance_user1
    unit_of_measurement: "ohm"
    icon: mdi:omega
    state_class: measurement
    accuracy_decimals: 0
    lambda: "return id(impedance_num_user1).state;"

  # Last Measurement Time sensor User 1
  - platform: template
    name: "Last Time Measurement ${user1_name}"
    id: last_time_measurement_user1
    lambda: "return id(last_time_measurement_num_user1).state;"
    device_class: timestamp

  # Weight sensor User 2
  - platform: template
    name: "Weight ${user2_name}"
    id: weight_user2
    unit_of_measurement: "kg"
    icon: mdi:scale-bathroom
    state_class: measurement
    accuracy_decimals: 2
    lambda: "return id(weight_num_user2).state;"

  # Impedance sensor User 2
  - platform: template
    name: "Impedance ${user2_name}"
    id: impedance_user2
    unit_of_measurement: "ohm"
    icon: mdi:omega
    state_class: measurement
    accuracy_decimals: 0
    lambda: "return id(impedance_num_user2).state;"

  # Last Measurement Time sensor User 2
  - platform: template
    name: "Last Time Measurement ${user2_name}"
    id: last_time_measurement_user2
    lambda: "return id(last_time_measurement_num_user2).state;"
    device_class: timestamp

  # Weight sensor User 3
  #  - platform: template
  #    name: "Weight ${user3_name}"
  #    id: weight_user3
  #    unit_of_measurement: 'kg'
  #    icon: mdi:scale-bathroom
  #    state_class: measurement
  #    accuracy_decimals: 2
  #    lambda: 'return id(weight_num_user3).state;'

  # Impedance sensor User 3
  #  - platform: template
  #    name: "Impedance ${user3_name}"
  #    id: impedance_user3
  #    unit_of_measurement: 'ohm'
  #    icon: mdi:omega
  #    state_class: measurement
  #    accuracy_decimals: 0
  #    lambda: 'return id(impedance_num_user3).state;'

  # Last Measurement Time sensor User 3
  #  - platform: template
  #    name: "Last Time Measurement ${user3_name}"
  #    id: last_time_measurement_user3
  #    lambda: 'return id(last_time_measurement_num_user3).state;'
  #    device_class: timestamp

  # Weight sensor user 4
  #  - platform: template
  #    name: "Weight ${user4_name}"
  #    id: weight_user4
  #    unit_of_measurement: 'kg'
  #    icon: mdi:scale-bathroom
  #    state_class: measurement
  #    accuracy_decimals: 2
  #    lambda: 'return id(weight_num_user4).state;'

  # Impedance sensor user 4
  #  - platform: template
  #    name: "Impedance ${user4_name}"
  #    id: impedance_user4
  #    unit_of_measurement: 'ohm'
  #    icon: mdi:omega
  #    state_class: measurement
  #    accuracy_decimals: 0
  #    lambda: 'return id(impedance_num_user4).state;'

  # Last Measurement Time sensor user 4
  #  - platform: template
  #    name: "Last Time Measurement ${user4_name}"
  #    id: last_time_measurement_user4
  #    lambda: 'return id(last_time_measurement_num_user4).state;'
  #    device_class: timestamp

  # Weight sensor user 5
  #  - platform: template
  #    name: "Weight ${user5_name}"
  #    id: weight_user5
  #    unit_of_measurement: 'kg'
  #    icon: mdi:scale-bathroom
  #    state_class: measurement
  #    accuracy_decimals: 2
  #    lambda: 'return id(weight_num_user5).state;'

  # Impedance sensor user 5
  #  - platform: template
  #    name: "Impedance ${user5_name}"
  #    id: impedance_user5
  #    unit_of_measurement: 'ohm'
  #    icon: mdi:omega
  #    state_class: measurement
  #    accuracy_decimals: 0
  #    lambda: 'return id(impedance_num_user5).state;'

  # Last Measurement Time sensor user 5
  #  - platform: template
  #    name: "Last Time Measurement ${user5_name}"
  #    id: last_time_measurement_user5
  #    lambda: 'return id(last_time_measurement_num_user5).state;'
  #    device_class: timestamp

  # Weight sensor Xiaomi Mi Scale
  - platform: xiaomi_miscale
    mac_address: ${mac_address}
    weight:
      name: "Xiaomi Mi Scale Weight"
      id: xiaomi_weight
      on_value:
        then:
          - if:
              condition:
                lambda: 'return (id(xiaomi_weight).state >= atof("${weight_user1_min}")) && (id(xiaomi_weight).state <= atof("${weight_user1_max}"));'
              then:
                - number.set:
                    id: weight_num_user1
                    value: !lambda "return id(xiaomi_weight).state;"
                - number.set:
                    id: last_time_measurement_num_user1
                    value: !lambda "return id(esptime).now().timestamp;"
          - if:
              condition:
                lambda: 'return (id(xiaomi_weight).state >= atof("${weight_user2_min}")) && (id(xiaomi_weight).state <= atof("${weight_user2_max}"));'
              then:
                - number.set:
                    id: weight_num_user2
                    value: !lambda "return id(xiaomi_weight).state;"
                - number.set:
                    id: last_time_measurement_num_user2
                    value: !lambda "return id(esptime).now().timestamp;"
          #  - if:
          #      condition:
          #        lambda: 'return (id(xiaomi_weight).state >= atof("${weight_user3_min}")) && (id(xiaomi_weight).state <= atof("${weight_user3_max}"));'
          #      then:
          #        - number.set:
          #            id: weight_num_user3
          #            value: !lambda 'return id(xiaomi_weight).state;'
          #        - number.set:
          #            id: last_time_measurement_num_user3
          #            value: !lambda 'return id(esptime).now().timestamp;'
          #  - if:
          #      condition:
          #        lambda: 'return (id(xiaomi_weight).state >= atof("${weight_user4_min}")) && (id(xiaomi_weight).state <= atof("${weight_user4_max}"));'
          #      then:
          #        - number.set:
          #            id: weight_num_user4
          #            value: !lambda 'return id(xiaomi_weight).state;'
          #        - number.set:
          #            id: last_time_measurement_num_user4
          #            value: !lambda 'return id(esptime).now().timestamp;'
          #  - if:
          #      condition:
          #        lambda: 'return (id(xiaomi_weight).state >= atof("${weight_user5_min}")) && (id(xiaomi_weight).state <= atof("${weight_user5_max}"));'
          #      then:
          #        - number.set:
          #            id: weight_num_user5
          #            value: !lambda 'return id(xiaomi_weight).state;'
          #        - number.set:
          #            id: last_time_measurement_num_user5
          #            value: !lambda 'return id(esptime).now().timestamp;'
    # Impedance sensor Xiaomi Mi Scale
    impedance:
      name: "Xiaomi Mi Scale Impedance"
      id: xiaomi_impedance
      on_value:
        then:
          - if:
              condition:
                lambda: 'return (id(xiaomi_weight).state >= atof("${weight_user1_min}")) && (id(xiaomi_weight).state <= atof("${weight_user1_max}"));'
              then:
                - number.set:
                    id: impedance_num_user1
                    value: !lambda "return id(xiaomi_impedance).state;"
          - if:
              condition:
                lambda: 'return (id(xiaomi_weight).state >= atof("${weight_user2_min}")) && (id(xiaomi_weight).state <= atof("${weight_user2_max}"));'
              then:
                - number.set:
                    id: impedance_num_user2
                    value: !lambda "return id(xiaomi_impedance).state;"
          #  - if:
          #      condition:
          #        lambda: 'return (id(xiaomi_weight).state >= atof("${weight_user3_min}")) && (id(xiaomi_weight).state <= atof("${weight_user3_max}"));'
          #      then:
          #        - number.set:
          #            id: impedance_num_user3
          #            value: !lambda 'return id(xiaomi_impedance).state;'
          #  - if:
          #      condition:
          #        lambda: 'return (id(xiaomi_weight).state >= atof("${weight_user4_min}")) && (id(xiaomi_weight).state <= atof("${weight_user4_max}"));'
          #      then:
          #        - number.set:
          #            id: impedance_num_user4
          #            value: !lambda 'return id(xiaomi_impedance).state;'
          #  - if:
          #      condition:
          #        lambda: 'return (id(xiaomi_weight).state >= atof("${weight_user5_min}")) && (id(xiaomi_weight).state <= atof("${weight_user5_max}"));'
          #      then:
          #        - number.set:
          #            id: impedance_num_user5
          #            value: !lambda 'return id(xiaomi_impedance).state;'
